using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Controls;
 
// Ensure this script runs before all other player scripts to prevent laggy inputs.
[DefaultExecutionOrder(-90)]
 
// Custom input class using the New Input System
public class PlayerInput : MonoBehaviour
{
    //=====================================================
    // Public properties
    // (to be accessed by external scripts)
    //=====================================================    
 
    // Horizontal and vertical axis input
    [HideInInspector] public float horizontal;
    [HideInInspector] public float vertical;
    [HideInInspector] public float horizontalRaw;
    [HideInInspector] public float verticalRaw;
 
    // Jump button
    [HideInInspector] public bool jumpPressed;
 
    // Grab button
    [HideInInspector] public bool grabPressed;
    [HideInInspector] public bool grabHeld;
    [HideInInspector] public bool grabReleased;
 
    //=====================================================
    // State
    //=====================================================
 
    // Bool used to keep input in sync between Update() and FixedUpdate()
    private bool readyToClear;
 
    // Input actions wrapper (generated by Unity Input System Asset)
    private PlayerInputActions controls;
 
    //=====================================================
    // Methods
    //=====================================================
 
    //
    private void Awake()
    {
        // Instantiate input actions
        controls = new PlayerInputActions();
    }
 
    // When this component is enabled
    private void OnEnable()
    {
        // Enable input actions
        controls.Player.Enable();
    }
 
    // When this component is disabled
    private void OnDisable()
    {
        // Disable input actions
        controls.Player.Disable();
    }
 
    // Update is called once per frame
    void Update()
    {
        // Clear out existing input values
        ClearInput();
 
        // If the Game Manager says the game is over, exit
        // TODO: This is a temporary solution, replace with a better solution
        // if (GameManager.Instance.IsGameOver() || GameManager.Instance.IsFreezeInput()) return;
 
        // Process player input using the new input system
        ProcessPlayerInputNew();
    }
 
    // Fixed update is called once per physics step
    void FixedUpdate()
    {
        // Set a flag that lets inputs to be cleared out during the next Update().
        // This ensures that all code gets to use the current inputs.
        readyToClear = true;
    }
 
    // Clear input, if we are ready
    private void ClearInput()
    {
        // If we are not ready to clear input, exit
        if (!readyToClear) return;
 
        // Reset all axis
        horizontal = 0f;
        vertical = 0f;
        horizontalRaw = 0f;
        verticalRaw = 0f;
 
        // Reset jump button
        jumpPressed = false;
 
        // Reset grab button
        grabPressed = false;
        grabHeld = false;
        grabReleased = false;
 
        // Just cleared the input
        readyToClear = false;
    }
 
    // Process player input using the new input system
    private void ProcessPlayerInputNew()
    {
        //=================================================
        // Horizontal and vertical axis
        //=================================================
 
        // Accumulate axis input
        // These values can be e.g. -2, -1, 0, 1, 2
        horizontal += controls.Player.HorizontalAxis.ReadValue<float>();
        vertical += controls.Player.VerticalAxis.ReadValue<float>();
 
        // Accumulate raw axis input
        horizontalRaw += horizontal;
        verticalRaw += vertical;
 
        // Clamp axis input to be between -1 and 1
        // These values are now limited to -1, 0, 1
        horizontal = Mathf.Clamp(horizontal, -1f, 1f);
        vertical = Mathf.Clamp(vertical, -1f, 1f);
 
        //=================================================
        // Jump button
        //=================================================
 
        // If the jump button was pressed this frame,
        // or was pressed in a previous frame, but was not yet cleared
        jumpPressed = jumpPressed || controls.Player.Jump.triggered;
 
        //=================================================
        // Grab button
        //=================================================
 
        // Cast input action to button control to get access to desired functionality
        var grabButtonControl = (ButtonControl)controls.Player.Grab.controls[0];
 
        // Check if the grab button was pressed this frame (comparable to GetButtonDown)
        bool grabPressedThisFrame = (grabButtonControl != null && grabButtonControl.wasPressedThisFrame);
        // Or was pressed in a previous frame, but was not yet cleared
        grabPressed = grabPressed || grabPressedThisFrame;
 
        // Check if the grab button was held this frame (comparable to GetButton)
        bool grabHeldThisFrame = (grabButtonControl != null && grabButtonControl.isPressed);
        // Or was pressed in a previous frame, but was not yet cleared
        grabHeld = grabHeld || grabHeldThisFrame;
 
        // Check if the grab button was released this frame (comparable to GetButtonUp)
        bool grabReleasedThisFrame = (grabButtonControl != null && grabButtonControl.wasReleasedThisFrame);
        // Or was pressed in a previous frame, but was not yet cleared
        grabReleased = grabReleased || grabReleasedThisFrame;

        //Debug.Log($"grabPressed: {grabPressed}, moved {horizontal} {vertical}");
    }
}